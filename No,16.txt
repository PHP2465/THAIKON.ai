// backend/worker/trainer.js
// Node.js script for training voice models (run on server, cloud, or scheduled job)

import { createClient } from "@supabase/supabase-js";
import axios from "axios";
import dotenv from "dotenv";

dotenv.config();

const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_SERVICE_KEY // ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ service role key
);

async function main() {
  console.log("üîÅ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏¥‡∏ß‡πÄ‡∏ó‡∏£‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•...");

  const { data: sessions, error } = await supabase
    .from("training_sessions")
    .select("*")
    .eq("status", "queued")
    .limit(1);

  if (error) throw error;
  if (!sessions || sessions.length === 0) return console.log("‚úÖ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏¥‡∏ß‡πÉ‡∏´‡∏°‡πà");

  const session = sessions[0];
  console.log("üéØ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ó‡∏£‡∏ô:", session.id);

  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô training
  await supabase
    .from("training_sessions")
    .update({ status: "training", logs: "‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏ó‡∏£‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•..." })
    .eq("id", session.id);

  try {
    // ‡∏™‡πà‡∏á API ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏£‡∏∞‡∏ö‡∏ö AI ‡πÄ‡∏ó‡∏£‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á (Mock)
    const response = await axios.post("https://api.example-ai.com/train", {
      audio_url: session.data_url,
      model_id: session.model_id,
    });

    const { model_output_url, logs } = response.data;

    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤ Supabase
    await supabase
      .from("training_sessions")
      .update({
        status: "done",
        logs: logs || "‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!",
      })
      .eq("id", session.id);

    await supabase
      .from("voice_models")
      .update({
        training_status: "done",
        output_url: model_output_url,
      })
      .eq("id", session.model_id);

    console.log("‚úÖ ‡πÄ‡∏ó‡∏£‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢:", session.model_id);
  } catch (err) {
    console.error("‚ùå ‡πÄ‡∏ó‡∏£‡∏ô‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:", err.message);
    await supabase
      .from("training_sessions")
      .update({
        status: "error",
        logs: `‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${err.message}`,
      })
      .eq("id", session.id);
  }
}

main();
