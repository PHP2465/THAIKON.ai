import React, { useEffect, useState } from "react";
import { supabase } from "./supabaseClient";
import { useAuth } from "./AuthContext";

export default function TrainingMonitor() {
  const { user } = useAuth();
  const [sessions, setSessions] = useState([]);

  useEffect(() => {
    const fetchSessions = async () => {
      if (!user) return;

      const { data, error } = await supabase
        .from("training_sessions")
        .select(`id, status, created_at, completed_at, voice_models (name, model_url)`)
        .eq("user_id", user.id)
        .order("created_at", { ascending: false });

      if (!error) setSessions(data);
    };

    fetchSessions();
  }, [user]);

  return (
    <div className="min-h-screen bg-gray-950 text-white p-8">
      <h1 className="text-3xl font-bold text-yellow-400 mb-6">ðŸ§  Training Monitor</h1>
      <div className="grid gap-4">
        {sessions.map((session) => (
          <div
            key={session.id}
            className="bg-gray-800 p-4 rounded-xl border-l-4"
            style={{
              borderColor:
                session.status === "completed"
                  ? "#4ade80"
                  : session.status === "processing"
                  ? "#facc15"
                  : "#f87171",
            }}
          >
            <h2 className="text-xl font-semibold">{session.voice_models?.name || "à¹‚à¸¡à¹€à¸”à¸¥à¹„à¸¡à¹ˆà¸¡à¸µà¸Šà¸·à¹ˆà¸­"}</h2>
            <p className="text-sm text-gray-400">
              à¸ªà¸–à¸²à¸™à¸°:{" "}
              <span
                className={
                  session.status === "completed"
                    ? "text-green-400"
                    : session.status === "processing"
                    ? "text-yellow-400"
                    : "text-red-400"
                }
              >
                {session.status}
              </span>
            </p>
            <p className="text-sm">à¹€à¸£à¸´à¹ˆà¸¡: {new Date(session.created_at).toLocaleString()}</p>
            {session.completed_at && (
              <p className="text-sm">à¹€à¸ªà¸£à¹‡à¸ˆ: {new Date(session.completed_at).toLocaleString()}</p>
            )}
            {session.voice_models?.model_url && (
              <a
                href={session.voice_models.model_url}
                className="text-blue-400 underline text-sm mt-2 inline-block"
                target="_blank"
                rel="noopener noreferrer"
              >
                ðŸ”— à¸”à¸²à¸§à¸™à¹Œà¹‚à¸«à¸¥à¸”à¹‚à¸¡à¹€à¸”à¸¥à¹€à¸ªà¸µà¸¢à¸‡
              </a>
            )}
          </div>
        ))}
      </div>
    </div>
  );
}
